/* Breakpoints mixins */

@mixin from-small-mobile-and-less {
	@media screen and (max-width: map-get($breakpoints, sm-mobile)) {
		@content;
	}
}

@mixin from-medium-mobile-and-less {
	@media screen and (max-width: map-get($breakpoints, md-mobile)) {
		@content;
	}
}

@mixin from-large-mobile-and-less {
	@media screen and (max-width: map-get($breakpoints, lg-mobile)) {
		@content;
	}
}

@mixin from-large-mobile-of-470px-and-less {
	@media screen and (max-width: map-get($breakpoints, lg-mobile-470w)) {
		@content;
	}
}

/* Small landscape orientation means 490px-529px in viewport width */
@mixin for-mobile-in-small-landscape-orientation {
	@media screen and (max-width: map-get($breakpoints,  mobile-small-landscape-orientation)) {
		@content;
	}
}

@mixin for-mobile-in-large-landscape-orientation {
	@media screen and (max-width: map-get($breakpoints, mobile-large-landscape-orientation)) {
		@content;
	}
}

@mixin from-tablette-and-less {
	@media screen and (max-width: map-get($breakpoints, tablette)) {
		@content;
	}
}

@mixin from-computer-and-less {
	@media screen and (max-width: map-get($breakpoints, computer)) {
		@content;
	}
}

@mixin from-large-screen-and-less {
	@media screen and (max-width: map-get($breakpoints, large-screen)) {
		@content;
	}
}


/* Sets the selector sizes */

@mixin set-sizes($sizes, $option: 0) {
	@if ($option == width) or ($option == height) {
		@if ($option == width) {
			width: $sizes;
		} @else if ($option == height) {
			height: $sizes;
		} @else {
			$sizes: 0;
		}
	} @else {
		width: map-get($sizes, width);
		height: map-get($sizes, height);
	}
}

/* Sets the selector margin */

@mixin set-margin($sizes, $optional-sides: 0) {
	@if (use-shorthand-property($optional-sides) == "no") {
		@if ($optional-sides == top) {
			margin-top: $sizes;
		}

		@if ($optional-sides == bottom) {
			margin-bottom: $sizes;
		}

		@if ($optional-sides == right) {
			margin-right: $sizes;
		}

		@if ($optional-sides == left) {
			margin-left: $sizes;
		}
	} @else {
		margin: $sizes;
	}
}

/* Sets the selctor padding */

@mixin set-padding($sizes, $optional-sides: 0) {
	@if (use-shorthand-property($optional-sides) == "no") {
		@if ($optional-sides == top) {
			padding-top: $sizes;
		}

		@if ($optional-sides == bottom) {
			padding-bottom: $sizes;
		}

		@if ($optional-sides == right) {
			padding-right: $sizes;
		}

		@if ($optional-sides == left) {
			padding-left: $sizes;
		}
	} @else {
		padding: $sizes;
	}
}